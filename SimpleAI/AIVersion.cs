///////////////////////////////////////////////////////////
//  AIVersion.cs
//  Implementation of the Class AIVersion
//  Generated by Enterprise Architect
//  Created on:      21-mar-2008 16:53:55
//  Original author: piotrw
///////////////////////////////////////////////////////////


using System;
using System.Runtime.Serialization;

namespace SimpleAI {
	public struct AIVersion {

        private int major;
        private int minor;

		/// <summary>
		/// Set / Returns Major component of the version
		/// </summary>
        public int Major
        {
            get { return major; }
            set { major = value; }
        }

		/// <summary>
		/// Set / Returns Minor component of the version
		/// </summary>
        public int Minor
        {
            get { return minor; }
            set { minor = value; }
        }

        public override string ToString()
        {
            return major.ToString() + "." + minor.ToString();
        }

        public static bool operator > (AIVersion ver1, AIVersion ver2)
        {
            if (ver1.major > ver2.major)
            {
                return true;
            }
            else if (ver1.major == ver2.major)
            {
                if (ver1.minor > ver2.minor)
                {
                    return true;
                }
            }
            return false;
        }

        public static bool operator < (AIVersion ver1, AIVersion ver2)
        {
            if (ver1.major < ver2.major)
            {
                return true;
            }
            else if (ver1.major == ver2.major)
            {
                if (ver1.minor < ver2.minor)
                {
                    return true;
                }
            }
            return false;
        }

        public static bool operator == (AIVersion ver1, AIVersion ver2)
        {
            if (ver1.major == ver2.major)
            {
                if (ver1.minor == ver2.minor)
                {
                    return true;
                }
            }

            return false;
        }

        public static bool operator != (AIVersion ver1, AIVersion ver2)
        {
            if (ver1.major == ver2.major)
            {
                if (ver1.minor == ver2.minor)
                {
                    return false;
                }
            }

            return true;
        }

		/// <summary>
		/// This method is not supported. Use == operator instead.
		/// </summary>
		/// <param name="ver1"></param>
        public override bool Equals(Object ver1)
        {
            Exception err = new Exception("AIVersion does not support .Equals(). Please use == operator");
            return false;
        }

        public override int GetHashCode()
        {
            return major * 100 + minor;
        }

		/// <summary>
		/// Serializes version
		/// </summary>
		/// <param name="info"></param>
		/// <param name="ctxt"></param>
        /*public void GetObjectData(SerializationInfo info, StreamingContext ctxt)
        {
            info.AddValue("Version.Major", this.major);
            info.AddValue("Version.Minor", this.minor);
        }*/

		/// <summary>
		/// Serializes version
		/// </summary>
		/// <param name="info"></param>
		/// <param name="ctxt"></param>
        /*public void Serialize(SerializationInfo info, StreamingContext ctxt)
        {
            info.AddValue("VMjr", this.major);
            info.AddValue("VMnr", this.minor);
        }*/

        /*public void Deserialize(SerializationInfo info, StreamingContext ctxt)
        {
            this.major = (int)info.GetValue("VMjr", typeof(int));
            this.minor = (int)info.GetValue("VMnr", typeof(int));
        }*/
        

	}//end AIVersion

}//end namespace SimpleAI