///////////////////////////////////////////////////////////
//  AIMap.cs
//  Implementation of the Class AIMap
//  Generated by Enterprise Architect
//  Created on:      21-mar-2008 19:33:24
//  Original author: piotrw
///////////////////////////////////////////////////////////




using SimpleAI;
using Microsoft.Xna.Framework;
using System;
namespace SimpleAI {
	public class AIMap : IAINameOwner {

        private string name;
        private int width = 0;
        private int height = 0;
        private AINode[,] nodes;

        protected float horizontalSpan;
        protected float verticalSpan;

        protected bool transformationDirty = true;

        protected Vector3 position;
        public Vector3 Position
        {
            get { return position; }
            set 
            { 
                position = value;
                transformationDirty = true;
            }
        }

        protected Vector3 rotation;
        public Vector3 Rotation
        {
            get { return rotation; }
            set 
            { 
                rotation = value;
                transformationDirty = true;
            }
        }

        protected Matrix transformation;
        public Matrix Transformation
        {
            get
            {
                if (transformationDirty == true)
                {
                    Vector3 baseOrientation = new Vector3(0, 1, 0);
                    float dotProduct = Vector3.Dot(baseOrientation, rotation);
                    float radiansToRotate = (float)Math.Acos((double)(dotProduct));
                    
                    transformation = 
                        Matrix.CreateRotationZ(radiansToRotate) *
                        Matrix.CreateTranslation(this.position);
                }
                transformationDirty = false;
                return transformation;
            }
        }

        /// <summary>
        /// Horizontal span of the map (in SimpleAI units which are meters)
        /// </summary>
        public float HorizontalSpan
        {
            get { return horizontalSpan; }
            set { horizontalSpan = value; }
        }

        /// <summary>
        /// Vercital span of the map (in SimpleAI units whicg are meters)
        /// </summary>
        public float VerticalSpan
        {
            get { return verticalSpan; }
            set { verticalSpan = value; }
        }
	
        /// <summary>
        /// Number of horizontal cells (nodes)
        /// </summary>
        public int Width
        {
            get { return width; }
        }

        /// <summary>
        /// Number of vertical cells (nodes)
        /// </summary>
        public int Height
        {
            get { return height; }
        }

		public AIMap(int width, int height, float horizontalSpan, float verticalSpan)
        {

            this.HorizontalSpan = horizontalSpan;
            this.VerticalSpan = verticalSpan;
            this.width = width;
            this.height = height;

            Vector3 startEdge = new Vector3();
            startEdge.X = this.HorizontalSpan * -0.5f; // graphicsDevice.Viewport.Width * 0.5f;
            startEdge.Y = this.VerticalSpan * -0.5f;// graphicsDevice.Viewport.Height * 0.5f;
            
            float horizontalStep = (float)(this.HorizontalSpan / width);
            float verticalStep = (float)(this.VerticalSpan / height);

            nodes = new AINode[width, height];
            for (int iWidth = 0; iWidth < width; iWidth++)
            {
                for (int iHeight = 0; iHeight < height; iHeight++)
                {
                    AINode newNode = new AINode();
                    newNode.Parent = this;
                    newNode.Type = 1;// +iWidth;// / (iHeight + 1);
                    newNode.X = iWidth;
                    newNode.Y = iHeight;
                    newNode.Position = new Vector3(
                        startEdge.X + horizontalStep * (float)iWidth,
                        startEdge.Y + verticalStep * (float)iHeight,
                        0);
                    nodes[iWidth, iHeight] = newNode;
                }
            } // next iWidth

		}

        ~AIMap()
        {

        }

        /// <summary>
        /// Implement your drawing code in the deriver method.
        /// </summary>
        public virtual void Draw()
        {
        }

        /// <summary>
        /// Implement projection matrix setup in the derived method.
        /// </summary>
        /// <param name="newMatrix"></param>
        public virtual void SetProjection(Matrix newMatrix)
        {
        }


		public virtual void Dispose(){

		}

        /// <summary>
        /// A name given to this map.
        /// </summary>
		public string Name{
			get{
				return name;
			}
			set{
				name = value;
			}
		}

        /// <summary>
        /// Return AINode that represents cell of an AIMap.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <returns></returns>
		public AINode Node(int width, int height){

            if (width >= 0 && width <= this.width - 1)
            {
                if (height >= 0 && height <= this.height - 1)
                {
                    return nodes[width, height];
                }
            }
            return null;
		}

	}//end AIMap

}//end namespace SimpleA