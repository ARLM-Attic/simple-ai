///////////////////////////////////////////////////////////
//  AIBehaviour.cs
//  Implementation of the Class AIBehaviour
//  Generated by Enterprise Architect
//  Created on:      20-mar-2008 20:30:11
//  Original author: piotrw
///////////////////////////////////////////////////////////




using System.Collections.Generic;
using SimpleAI.Behaviours;
using Microsoft.Xna.Framework;
namespace SimpleAI {

    /// <summary>
    /// Defined the base clase for all behaviours.
    /// Each behaviour has be be attached to a character.
    /// Behaviour can consist of multiple subbehaviours.
    /// </summary>
	public class AIBehaviour 
    {
        protected AISubbehaviours subbehaviours;
        protected int currentSubBehaviour;

        protected AIBehaviourState state;
        public AIBehaviourState State
        {
            get { return state; }
        }


        public AISubbehaviours SubBehaviours
        {
            get { return subbehaviours; }
        }
        

        protected AIActor character;
        public AIActor Character
        {
            get { return character; }
            set { 
                character = value;
                if (subbehaviours != null)
                {
                    for (int index = 0; index < subbehaviours.Count; index++)
                    {
                        subbehaviours[index].Character = value;
                    }
                }
            }
        }

        protected AIMap map;
        public AIMap Map
        {
            get { return map; }
            set
            {
                this.map = value;
                if (subbehaviours != null)
                {
                    for (int index = 0; index < subbehaviours.Count; index++)
                    {
                        subbehaviours[index].Map = value;
                    }
                }
            }
        }


        public AIBehaviour()
        {
            state = AIBehaviourState.Idle;
            currentSubBehaviour = 0;
	    }


        public virtual void Reset()
        {
            currentSubBehaviour = 0;
            this.state = AIBehaviourState.Idle;
            if (subbehaviours != null)
            {
                for (int index = 0; index < subbehaviours.Count; index++)
                {
                    subbehaviours[index].Reset();
                }
            }
        }


        public virtual void Iterate(GameTime gameTime)
        {
            if (subbehaviours != null)
            {
                IterateSubBehaviours(gameTime);
            }
        }


        public virtual void IterateSubBehaviours(GameTime gameTime)
        {
            if (subbehaviours.Count > 0)
            {
                // check state of the current subbehaviour
                if (subbehaviours[currentSubBehaviour].State == AIBehaviourState.Idle ||
                    subbehaviours[currentSubBehaviour].State == AIBehaviourState.Working)
                {
                    this.state = AIBehaviourState.Working;
                    subbehaviours[currentSubBehaviour].Iterate(gameTime);
                }
                else
                {
                    if (subbehaviours[currentSubBehaviour].State == AIBehaviourState.Failed)
                    {
                        this.OnBehaviourFailure(currentSubBehaviour);
                    }
                    else if (subbehaviours[currentSubBehaviour].State == AIBehaviourState.Finished)
                    {
                        this.OnBehaviourFinish(currentSubBehaviour);
                    }
                }
            }
        }

        public virtual void OnBehaviourFinish(int finishedBehaviour)
        {
            // try to start next behaviour if there is something else
            // if not, just finish this behaviour
            if (finishedBehaviour == subbehaviours.Count - 1)
            {
                this.state = AIBehaviourState.Finished;
            }
            else
            {
                this.state = AIBehaviourState.Working;
                currentSubBehaviour++;
            }
        }

        public virtual void OnBehaviourFailure(int failedBehaviour)
        {
            this.state = AIBehaviourState.Failed;
        }


		~AIBehaviour(){

		}

		public virtual void Dispose(){

		}

        public virtual void Draw()
        {
        }

	}//end namespace Behaviours//end AIBehaviour

}//end namespace SimpleAI